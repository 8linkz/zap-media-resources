1
00:00:00,000 --> 00:00:11,960
Hello, and welcome to a new video in the ZAP Chat series.

2
00:00:11,960 --> 00:00:17,680
And this is going to be a video about a new feature in the new ZAP release, 2.14, and

3
00:00:17,680 --> 00:00:19,680
it's called ZAPit.

4
00:00:19,680 --> 00:00:22,640
And this time I'm actually joined by Yiannis.

5
00:00:22,640 --> 00:00:24,640
Hello.

6
00:00:24,640 --> 00:00:32,140
So usually I stick to these videos, I keep technical.

7
00:00:32,140 --> 00:00:38,940
But on some interviews I've done, I have explained my security origin story.

8
00:00:38,940 --> 00:00:47,060
And what happened was, I'll keep it very short, there was a pentest that did not go as well

9
00:00:47,060 --> 00:00:53,780
as expected on one of my services, and I knew it was going badly after I came in one hour

10
00:00:53,780 --> 00:00:54,620
into the pentest.

11
00:00:54,620 --> 00:00:59,920
Only to find one of the pentesters logged in as myself, super user, having cracked the

12
00:00:59,920 --> 00:01:02,800
single sign-on system for the whole company.

13
00:01:02,800 --> 00:01:05,080
Now why is that relevant?

14
00:01:05,080 --> 00:01:08,480
Because that was the first time I met Yiannis, who was the pentester who logged in, who

15
00:01:08,480 --> 00:01:10,380
cracked the single sign-on service.

16
00:01:10,380 --> 00:01:14,500
So Yiannis, I don't think I've had a chance to publicly thank you for ruining my week

17
00:01:14,500 --> 00:01:19,760
in 2009, but also more importantly, starting my security journey, which led to ZAP.

18
00:01:19,760 --> 00:01:21,060
So thank you very much.

19
00:01:21,060 --> 00:01:24,120
Thank you for your patience and being part of this cyber community.

20
00:01:24,120 --> 00:01:26,440


21
00:01:26,440 --> 00:01:30,500
Little did I know we're going to be here a few years later, right, discussing the amazing

22
00:01:30,500 --> 00:01:33,300
tool that you've put together with the team.

23
00:01:33,300 --> 00:01:34,300
Myself and the team, exactly.

24
00:01:34,300 --> 00:01:37,740
So do you want to give us a quick introduction to yourself?

25
00:01:37,740 --> 00:01:38,880
Yeah, sure.

26
00:01:38,880 --> 00:01:41,680
Just keeping it short, my name is Yiannis Papouasoglou.

27
00:01:41,680 --> 00:01:50,340
I have contributed to a number of web application relating standards and activities.

28
00:01:50,340 --> 00:01:54,120
And currently, one of the things that I've really enjoyed is getting 

29
00:01:54,120 --> 00:01:59,240
back into contributing to ZAPit and seeing some of the great work, Simon,

30
00:01:59,240 --> 00:02:06,320
that you've been doing with the team and the code and how much of a tool, how like how well established

31
00:02:06,320 --> 00:02:09,800
is ZAPit within the webapp sec community.

32
00:02:09,800 --> 00:02:12,520
Congratulations to you and the team on that.

33
00:02:12,520 --> 00:02:13,520
Thank you.

34
00:02:13,520 --> 00:02:17,440
So, I mean, you got back in touch with me a few weeks ago, wasn't it?

35
00:02:17,440 --> 00:02:19,540
It wasn't long ago.

36
00:02:19,540 --> 00:02:23,500
And you came to me with this idea and I just thought, oh, I like this.

37
00:02:23,500 --> 00:02:25,140
So give us an overview.

38
00:02:25,140 --> 00:02:26,140
What is ZAPit?

39
00:02:26,140 --> 00:02:27,140
What's the idea?

40
00:02:27,140 --> 00:02:32,380
Well, I got back into web application security after having served as chief information security

41
00:02:32,380 --> 00:02:41,220
and you know joining a number of senior echelons of management as CISO and really looked at the

42
00:02:41,220 --> 00:02:46,380
state of the tool set that we're using and was not happy with it.

43
00:02:46,380 --> 00:02:50,680
ZAPit being a prime good example, but most of the tools out there, if you download any

44
00:02:50,680 --> 00:02:53,500
pentesting image, you're bog standard

45
00:02:53,500 --> 00:02:57,540
web app toolset is not really that good

46
00:02:57,540 --> 00:03:03,380
and my motivation in reaching out to you was, well, I know that you have solved this problem.

47
00:03:03,380 --> 00:03:06,840
We'll talk a little bit about what this is in a second.

48
00:03:06,840 --> 00:03:13,280
But we haven't made it simple for the web app sec community, not just penetration testers,

49
00:03:13,280 --> 00:03:18,140
but also developers, also product owners, people that end up owning a website they've

50
00:03:18,140 --> 00:03:19,140
inherited.

51
00:03:19,140 --> 00:03:23,140
We have not made their life simple in terms of understanding what they're up against.

52
00:03:23,140 --> 00:03:29,340
In terms of a web app that they've been handed either to test or they've inherited and they

53
00:03:29,340 --> 00:03:30,980
need to look after it.

54
00:03:30,980 --> 00:03:37,100
So the basic premise of ZAPit started with what is the maximum we can get out in terms

55
00:03:37,100 --> 00:03:41,520
of a response, single request response, to figure out what we're up against.

56
00:03:41,520 --> 00:03:48,260
Either Monday morning, the pentester is starting the web app test or somebody has inherited

57
00:03:48,260 --> 00:03:52,180
an application and they're trying to see what they're up against, trying to get a feel of

58
00:03:52,180 --> 00:03:53,100
it.

59
00:03:53,140 --> 00:03:58,700
And what really motivated me was people were still using the old tool set because, you

60
00:03:58,700 --> 00:04:07,380
know, great tools, but a bit dated, things like Paros and Nikto and similar, which, you

61
00:04:07,380 --> 00:04:08,380
know, are very good.

62
00:04:08,380 --> 00:04:11,420
But at the same time, you know, the world has moved on a little bit.

63
00:04:11,420 --> 00:04:18,580
It's 2023 and we need to, you know, come up to speed with what it is that actually the

64
00:04:18,580 --> 00:04:22,980
needs out there to figure out quickly and promptly what you're up against.

65
00:04:22,980 --> 00:04:25,260
In terms of a web application.

66
00:04:25,260 --> 00:04:26,260
That's the motivation.

67
00:04:26,260 --> 00:04:27,260
And that's what got us here.

68
00:04:27,260 --> 00:04:31,680
And as you said, you quite well have a little bit of that.

69
00:04:31,680 --> 00:04:34,260
How was it received on your side, Simon?

70
00:04:34,260 --> 00:04:35,260
Really good.

71
00:04:35,260 --> 00:04:41,620
I mean, this was something that really spoke to me, particularly when I was at Mozilla.

72
00:04:41,620 --> 00:04:46,180
I had responsibility for the web applications behind Firefox.

73
00:04:46,180 --> 00:04:52,300
And they're all too many times when you find out about a new web app.

74
00:04:52,300 --> 00:04:57,600
And sometimes you'd find out about them early in design stage.

75
00:04:57,600 --> 00:04:59,720
Sometimes you'd find out when they're in staging.

76
00:04:59,720 --> 00:05:04,440
Often you'd find out from some sort of marketing release and you go, oh, I don't know about

77
00:05:04,440 --> 00:05:05,440
this.

78
00:05:05,440 --> 00:05:12,220
So, you know, what you need to do, you know, there's lots of ways you find about new applications.

79
00:05:12,220 --> 00:05:15,100
Obviously you can try and find out who's behind it, talk to them.

80
00:05:15,100 --> 00:05:19,100
But while you're trying to find that out, I just want to know as much as possible, as

81
00:05:19,100 --> 00:05:21,580
quickly as possible about this URL.

82
00:05:21,580 --> 00:05:26,900
Is it something, does it raise loads of red flags or is it, okay, no one, you know, I

83
00:05:26,900 --> 00:05:29,200
don't feel so bad about this.

84
00:05:29,200 --> 00:05:34,240
So, you know, by the time you get on the phone or on Zoom or on Slack or whatever, you've

85
00:05:34,240 --> 00:05:37,940
kind of got an initial impression of that application.

86
00:05:37,940 --> 00:05:42,460
And that's what I could imagine myself using this for back in, you know, when I was doing

87
00:05:42,460 --> 00:05:43,460
that job.

88
00:05:43,460 --> 00:05:44,460
Indeed.

89
00:05:44,460 --> 00:05:45,460
Indeed.

90
00:05:45,460 --> 00:05:47,720
And I think those are the, that's the primary use case.

91
00:05:47,720 --> 00:05:49,720
Those are the three use cases.

92
00:05:49,720 --> 00:05:50,680
So Pentest is trying to figure out.

93
00:05:50,680 --> 00:05:50,920
Yeah.

94
00:05:50,920 --> 00:05:54,020
What they're up against.

95
00:05:54,020 --> 00:05:57,900
Somebody who's looking after an application that maybe shouldn't have reached production,

96
00:05:57,900 --> 00:06:00,720
but somehow magically is already in production.

97
00:06:00,720 --> 00:06:02,080
That's a second use case.

98
00:06:02,080 --> 00:06:07,620
And then also somebody trying to figure out just the baseline real quickly of what the

99
00:06:07,620 --> 00:06:08,620
app is doing.

100
00:06:08,620 --> 00:06:09,620
Right.

101
00:06:09,620 --> 00:06:12,980
So I think that's enough talking let's let's demo.

102
00:06:12,980 --> 00:06:13,980
Yeah, absolutely.

103
00:06:13,980 --> 00:06:14,980
Let's go for it.

104
00:06:14,980 --> 00:06:15,980
Yes, indeed.

105
00:06:15,980 --> 00:06:20,020
So first of all, let's start with ZAPit itself and the great 2.14 Release.

106
00:06:20,020 --> 00:06:21,020


107
00:06:21,020 --> 00:06:22,020
Yeah.

108
00:06:22,020 --> 00:06:23,020
What are you going to be showing us?

109
00:06:23,020 --> 00:06:24,020
Right.

110
00:06:24,020 --> 00:06:30,020
One of the, so obviously I've got ZAP installed and a lot of you watching this these videos

111
00:06:30,020 --> 00:06:37,020
will have, but if you haven't what you can do is you can actually run it via Docker,

112
00:06:37,020 --> 00:06:40,020
or if you're on Kali, you can do it that way.

113
00:06:40,020 --> 00:06:42,020
The thing is, this is actually a command line option.

114
00:06:42,020 --> 00:06:44,020
So there's no GUI at the moment.

115
00:06:44,020 --> 00:06:45,020
It's just a command line.

116
00:06:45,020 --> 00:06:47,020
So what I'm gonna do is I'm going to run ZAP and I'm going to do the ZAP statement.

117
00:06:47,020 --> 00:06:48,020
And then I'm going to run a command line.

118
00:06:48,020 --> 00:06:49,020
And then I'm going to run the command line.

119
00:06:49,020 --> 00:06:50,020
Yeah.

120
00:06:50,020 --> 00:06:54,020
And then I'm going to run ZAP stable from software security project slash ZAP stable.

121
00:06:54,020 --> 00:06:59,020
I've pulled this already just to speed things up and don't worry about copying down these

122
00:06:59,020 --> 00:07:00,020
commands.

123
00:07:00,020 --> 00:07:01,020
We're going to write a blog post about this.

124
00:07:01,020 --> 00:07:02,020
So all the commands will be in there.

125
00:07:02,020 --> 00:07:07,020
So you don't have to desperately try and copy what I'm doing, but that will basically put

126
00:07:07,020 --> 00:07:11,020
me in a bash shell in the ZAP stable Docker image.

127
00:07:11,020 --> 00:07:19,020
Now, if I do ./zap.sh -h, just to just run the help and it will have

128
00:07:19,020 --> 00:07:23,020
set up the root of the standard directory.

129
00:07:23,020 --> 00:07:27,020
As you'll see, we've got a whole load of command line options.

130
00:07:27,020 --> 00:07:35,020
And lower down here, we'll see ZAPit target URL from a quick reconnaissance scan and also

131
00:07:35,020 --> 00:07:38,020
says the minus command option must be used.

132
00:07:38,020 --> 00:07:40,020
So let me just.

133
00:07:40,020 --> 00:07:47,020
So what I'm going to do is minus command and then -zapit

134
00:07:47,020 --> 00:07:49,020


135
00:07:49,020 --> 00:07:54,020
and https://www.example.com

136
00:07:54,020 --> 00:07:55,020


137
00:07:55,020 --> 00:07:59,020
and you know often we say with ZAP, you should only be testing ZAP against applications you

138
00:07:59,020 --> 00:08:02,020
have permission to test.

139
00:08:02,020 --> 00:08:05,020
In this case, we are doing no attacking at all.

140
00:08:05,020 --> 00:08:09,020
You can see we just made one request there.

141
00:08:09,020 --> 00:08:13,020
So it's a standard HTTP or HTTPS request.

142
00:08:13,020 --> 00:08:16,020
And so we can see that and we'll show you some examples of redirect some it. And you can see how long the

143
00:08:16,020 --> 00:08:21,600
request took the response code the response size no cookies in the quest response and then

144
00:08:21,600 --> 00:08:28,440
technology it's not available because we actually need another add-on for that

145
00:08:28,440 --> 00:08:38,520
so let me install that so minus command and then we want to do addoninstall

146
00:08:38,520 --> 00:08:45,860
right number of l's. So Simon while you do that tell us a little bit about the wappanalyzer

147
00:08:45,860 --> 00:08:53,000
add-on what does it do? Yeah so wappanalyzer is a third party product it's actually

148
00:08:53,000 --> 00:08:58,180
just been taken close source and luckily someone else has forked it and is now maintaining

149
00:08:58,180 --> 00:09:05,080
it it really looks at requests and responses typically responses and works out what technology

150
00:09:05,080 --> 00:09:13,840
is behind the web applications it's really useful and also i'm going to install the pscan

151
00:09:13,840 --> 00:09:15,840


152
00:09:15,840 --> 00:09:23,080
rules beta so we have a set a particular stable image we have a set of release quality scan rules

153
00:09:23,080 --> 00:09:28,800
both active scan rules and passive scan rules p scan rules and passive ones we in the stable

154
00:09:28,800 --> 00:09:35,000
image we don't include the beta ones so i'm going to install the passive scan beta rules

155
00:09:35,000 --> 00:09:39,200
there are also alpha rules as well so could install those and that just gives us more

156
00:09:39,200 --> 00:09:44,600
information there's just extra things but these rules are not quite as stable and well tested

157
00:09:44,600 --> 00:09:52,620
as the release quality ones. So you basically have to install the two add-ons wappanalyzer and p

158
00:09:52,620 --> 00:09:57,140
for passive scan rules beta and because it's in beta it's not included by default that's why you

159
00:09:57,140 --> 00:10:05,780
have to install that excellent. I will just do add-on update now i this will actually do nothing

160
00:10:05,780 --> 00:10:14,580
here but add-on update always tricky with a live demo add yeah add-on

161
00:10:14,580 --> 00:10:14,600


162
00:10:14,600 --> 00:10:19,560
update now i'm not expecting this to do anything because we've only just released the stable

163
00:10:19,560 --> 00:10:24,340
release but obviously we release it once a week sorry once a month so if there are any updates

164
00:10:24,340 --> 00:10:31,220
in between we'd miss out on those i said add on update complete check complete nothing else

165
00:10:31,220 --> 00:10:37,420
installed so we're now we're looking good and what i'm going to do is i'm just going to go back

166
00:10:37,420 --> 00:10:43,740
and run ZAPit against example.com again. And now we'll see a little bit more about the tech.

167
00:10:43,740 --> 00:10:52,020
Yeah and here we go so again we still see the request coming in and here's the technology so

168
00:10:52,020 --> 00:10:59,380
we can see amazon ecs, amazon web services, azure, azure cdn and docker and i think we've got so

169
00:10:59,380 --> 00:11:04,660
what we're showing now is the alerts now these are alerts raised by the passive scan rules

170
00:11:04,660 --> 00:11:12,500
and we can have high, medium, low and informational and you know you have to you shouldn't just

171
00:11:12,500 --> 00:11:13,720
believe these and go okay

172
00:11:13,720 --> 00:11:18,800
there's been a particular alert therefore there's a vulnerability therefore i raise it via bug bounty

173
00:11:18,800 --> 00:11:23,820
or whatever try and get some money it'll be you know always you should always double check these

174
00:11:23,820 --> 00:11:28,320
things and just because there's an alert you know it might then it might well be the company's

175
00:11:28,320 --> 00:11:32,580
decided we know about this and it's not a problem we do not want to enable this particular security

176
00:11:32,580 --> 00:11:39,160
control so you know these these information for you just give you an idea of what's going on

177
00:11:39,160 --> 00:11:41,780
and we also give you root page stats so

178
00:11:43,720 --> 00:11:48,160
you can see things like the content type number of html tags, number of links forms and number of

179
00:11:48,160 --> 00:11:57,600
input fields and remember this is on the very first page. So that's the information from example.com

180
00:11:57,600 --> 00:12:02,240
which is not a particularly interesting application actually so Yiannis what else should we test?

181
00:12:03,760 --> 00:12:08,400
Let's have a look at something that's going to give us a lot of verbosity..

182
00:12:08,400 --> 00:12:11,600
Shall we start with twitter.com? Okay.

183
00:12:13,720 --> 00:12:22,080
So let's have a look at Twitter. So Twitter is going to be interesting in a number of ways

184
00:12:22,080 --> 00:12:31,940
first and foremost in terms of what does it allow as oh there we are as a number of sub

185
00:12:31,940 --> 00:12:39,760
resources and specific items where wildcards are being used you see the medium CSP content

186
00:12:39,760 --> 00:12:43,680
security policy wildcard director they actually need that in order to allow

187
00:12:43,680 --> 00:12:48,940
video to be functioning right so going back to simon's quote it's not about taking a medium risk

188
00:12:48,940 --> 00:12:54,460
finding from ZAPit and then including it in your pentest report it needs further analysis and

189
00:12:54,460 --> 00:13:03,180
triage. What i like about the response here is that it under you know one second 565 milliseconds,

190
00:13:03,180 --> 00:13:10,200
i'm able to figure out what technology Twitter is still using right, on the new leadership i'm able

191
00:13:10,200 --> 00:13:13,660
to figure out real quickly what it is that they're doing and what they're doing and what they're doing

192
00:13:13,660 --> 00:13:19,020
in terms of the web application setup so if we scroll a little bit further down Simon you see

193
00:13:19,020 --> 00:13:24,360
that we've got a number of script javascripts and a number of lows as well correct in terms of cross

194
00:13:24,360 --> 00:13:25,600
domain

195
00:13:25,620 --> 00:13:34,000
javascripts happening again needed functionality the way that Twitter is set up and then also to

196
00:13:34,000 --> 00:13:42,300
Simon's point i can see what i'm dealing with in terms of html tags, forms, links so a lot of tags

197
00:13:42,320 --> 00:13:43,040
very little 

198
00:13:43,040 --> 00:13:43,180


199
00:13:43,180 --> 00:13:43,320


200
00:13:43,320 --> 00:13:43,660


201
00:13:43,660 --> 00:13:49,980
forms one input field straight away we know roughly what what we're up against. And there's

202
00:13:49,980 --> 00:13:57,440
also informational modern web application so a lot of security tools are much more effective

203
00:13:57,440 --> 00:14:02,080
with traditional web applications now we've done quite a lot of work with ZAP to make it handle

204
00:14:02,080 --> 00:14:06,760
modern web applications better there's still more work to do but one of the things that

205
00:14:06,760 --> 00:14:11,820
does is actually tries to detect modern web applications so we can actually choose then to

206
00:14:11,820 --> 00:14:16,200
use the ajax spider instead of the traditional spider or as well as the traditional spider.

207
00:14:16,200 --> 00:14:23,200
So there's lots of so you know we can see that ZAP has detected this you know there's a lot

208
00:14:23,200 --> 00:14:28,820
of really useful information here. Indeed, indeed you know what you're up against in a very short

209
00:14:28,820 --> 00:14:34,280
time right normally this would take a number of other tools some of which are not maintained in

210
00:14:34,280 --> 00:14:38,480
order to figure out what what you're up against now you have all that information in one page

211
00:14:38,480 --> 00:14:41,800
on monday morning as you start start starting your next

212
00:14:41,800 --> 00:14:46,920
web application test. And we see things like response cookies and you know and if you see

213
00:14:46,920 --> 00:14:51,680
multiple requests and responses for redirects you'll see the cookies go across so you see a lot

214
00:14:51,680 --> 00:15:00,460
of information and.. Another one? Yeah let's have another one. Let's go for something that returns

215
00:15:00,460 --> 00:15:05,840
a 404 so having looked at the websites and actually one of the ways that we tested this was

216
00:15:05,840 --> 00:15:11,320
we took the top 1000 websites for one list or another it doesn't matter which one and we saw that type of

217
00:15:11,800 --> 00:15:20,500
responses we we got back. Running against all of them. Yes, yes absolutely so fonts.googleapis.com

218
00:15:20,500 --> 00:15:29,520
is on the top 100 it's basically by default a website that returns a 404 an error back nothing

219
00:15:29,520 --> 00:15:33,700
comes back but there is something of value that will come back from the response that we're going

220
00:15:33,700 --> 00:15:40,640
to see here there we are we see the 404 now what's interesting straight away even though i have a 404,

221
00:15:41,800 --> 00:15:45,120
i can see http/3 is beeing used as a technology

222
00:15:45,120 --> 00:15:49,220
of course this is going to have to be investigated further and actually assess whether or not http/3

223
00:15:49,220 --> 00:15:58,240
is being used in terms of you know sending a request that supports not only http/1, 1.1, 2 but

224
00:15:58,240 --> 00:16:05,300
3 and seeing what response you get back but we got a hint that something that is future future

225
00:16:05,300 --> 00:16:11,780
technology is being supported on the googleapis.com on the fonts sorry googleapis.com.

226
00:16:11,800 --> 00:16:17,160
Now one thing one thing i think is interesting here is content security policy header not set.

227
00:16:17,160 --> 00:16:25,900
Now we often see these on 404s and there was quite recently a case of sql injection attack on a 404

228
00:16:25,900 --> 00:16:31,700
impact. Yes! So you know and quite a few people you know i've had cases before gone to developers

229
00:16:31,700 --> 00:16:36,480
and said look you haven't got CSP on your on your error pages and they've gone do we really need it

230
00:16:36,480 --> 00:16:41,780
and i've tried to convince them they do but i haven't had good examples of you know this is a

231
00:16:41,800 --> 00:16:46,940
this is why you really need it and now we have a good example why you should really have you

232
00:16:46,940 --> 00:16:50,520
know we've got CSP on the rest of your site you probably want it on your for on your error pages

233
00:16:50,520 --> 00:16:55,800
as well. Yeah absolutely and i have a big b in my bonnet about sql injection still being around

234
00:16:55,800 --> 00:17:01,720
because after being in the corporate world for for more than 10 years i set up my second

235
00:17:01,720 --> 00:17:06,460
company kyberna and one of the services of course that we had to offer right was pentesting, because

236
00:17:06,460 --> 00:17:11,480
that's part of the bread and butter of what infosec companies do and we started off with 2

237
00:17:11,800 --> 00:17:19,300
pentests one on the dotnet framework 4.5 and one on java jakarta 10 you know your standard

238
00:17:19,300 --> 00:17:25,960
enterprise just both had sql injection i couldn't believe it and this was you know this was last

239
00:17:25,960 --> 00:17:30,220
year effectively when we when we started the company and it's like i phoned up needless to

240
00:17:30,220 --> 00:17:34,140
say Simon i phoned some of the original authors that we wrote OWASP testing guide with

241
00:17:34,140 --> 00:17:41,380
and had a big long rant about how come sql injection is still around. That is crazy.

242
00:17:41,800 --> 00:17:47,800
So what i'm going to test next then? Let's have a look at so we did Twitter shall we have a look

243
00:17:47,800 --> 00:17:58,520
at the BBC website? Yeah let's and i'm going to do http just to.. Very often in many circles

244
00:17:59,080 --> 00:18:03,080
the BBC is used as for example when you're connecting to a wireless network

245
00:18:03,640 --> 00:18:11,400
and you don't have the certificate for ssl the BBC is used in http as the website that is being served.

246
00:18:11,800 --> 00:18:18,320
Traditionally to test connectivity and we see a lot of responses come back

247
00:18:18,320 --> 00:18:24,780
and you have i know Simon you have a favorite on this page i don't want to take.. I do go back to

248
00:18:24,780 --> 00:18:30,280
the front so you can actually see we've got two redirects here because we request to bbc.com

249
00:18:30,280 --> 00:18:41,640
http so that gets redirected to https and then we yeah then we get redirected to

250
00:18:41,800 --> 00:18:52,760
https://www.bbc.com so and then as we scroll down we'll see lots of interesting things

251
00:18:52,760 --> 00:18:57,360
the one i particularly like is suspicious comments "fixme".

252
00:18:57,360 --> 00:19:07,320
We get interesting information here. Absolutely and again this is you know something that could

253
00:19:07,320 --> 00:19:11,780
have a little bit of meat on the bone or it could be just you know something that's

254
00:19:11,800 --> 00:19:16,440
involving some javascript component that really makes no difference in terms of exploitation or

255
00:19:16,440 --> 00:19:21,560
vulnerabilities but straight away in under a second you're able to deal with the 302s

256
00:19:21,560 --> 00:19:25,960
the redirects and then you're able to just have a view of what you're up against

257
00:19:27,400 --> 00:19:34,120
or just a single request and response really like that feature. Right well i think we're actually

258
00:19:34,120 --> 00:19:41,400
running out of time on my zoom unfortunately so better wrap this up quite quickly. Thank you

259
00:19:41,800 --> 00:19:47,560
very much for that introduction to ZAPit and the suggestion now i mean one thing we do want to

260
00:19:47,560 --> 00:19:54,040
do is we've got we've got we'd love to hear about people using this and how you get on with

261
00:19:54,040 --> 00:19:59,080
it and you've got any suggestions because we've got lots of extra, we've had lots of thoughts on

262
00:19:59,080 --> 00:20:05,640
things we could do so you know, we've got we could have some html or pdf reports, we could

263
00:20:05,640 --> 00:20:09,560
actually have an option to have a longer scan where we kick off the spider would you want to

264
00:20:09,560 --> 00:20:11,380
know how many end points there are?

265
00:20:11,380 --> 00:20:17,380
These things will take longer but there's lots and lots of things we could do but we don't have that many people

266
00:20:17,380 --> 00:20:21,980
working on ZAP and there's a million things we want to do so we also only want to do the things

267
00:20:21,980 --> 00:20:28,580
that are really effective that people really want and really want to use so please try this out

268
00:20:28,580 --> 00:20:39,220
and let us know how you get on. So that's it thank you very much and subscribe to the channel and let

269
00:20:39,220 --> 00:20:44,360
us know what you think about it and what else you'd like us to cover thank you very much! Thank you!

