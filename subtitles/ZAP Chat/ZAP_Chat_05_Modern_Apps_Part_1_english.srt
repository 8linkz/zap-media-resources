1
00:00:05,000 --> 00:00:10,440
Hello, and welcome to another episode of ZAP Chat.

2
00:00:10,440 --> 00:00:14,660
And this time we're going to be talking about modern web applications.

3
00:00:14,660 --> 00:00:16,440
And once again, I'm not on my own.

4
00:00:16,440 --> 00:00:18,440
I'm joined by Yiannis.

5
00:00:18,440 --> 00:00:19,440
Hi, Yiannis.

6
00:00:19,440 --> 00:00:20,440
Hello.

7
00:00:20,440 --> 00:00:26,320
So, the last time we did a demo was on ZAPit.

8
00:00:26,320 --> 00:00:28,400
It seemed to work really well between the two of us with Yiannis here.

9
00:00:28,400 --> 00:00:30,620
So that's why I've asked Yiannis to come back.

10
00:00:30,620 --> 00:00:33,020
So it's a double act now.

11
00:00:33,020 --> 00:00:38,080
So anyway, what we're going to talk about is modern web applications and how ZAP can

12
00:00:38,080 --> 00:00:39,480
handle them better.

13
00:00:39,480 --> 00:00:44,840
We already handle modern web applications, but we know we could always do better.

14
00:00:44,840 --> 00:00:49,700
And we also know that we've had a survey done recently.

15
00:00:49,700 --> 00:00:51,040
Some of you may have filled that in.

16
00:00:51,040 --> 00:00:56,000
And handling modern web applications better has come up as the most important thing for

17
00:00:56,000 --> 00:00:57,000
you.

18
00:00:57,000 --> 00:00:58,380
So this is something we're already working on.

19
00:00:58,380 --> 00:01:01,680
But I wanted to show how far we've got.

20
00:01:01,680 --> 00:01:04,500
And you can see there's still quite a bit to do.

21
00:01:04,500 --> 00:01:12,780
So what I'm going to do is I'm going to share my screen.

22
00:01:12,780 --> 00:01:17,060
And hopefully you will be able to see ZAP.

23
00:01:17,060 --> 00:01:20,100
So this is ZAP 2.14.

24
00:01:20,100 --> 00:01:23,800
And what I'm going to do is I'm going to go straight into the demo.

25
00:01:23,800 --> 00:01:27,000
And I want to show you a modern web application.

26
00:01:27,000 --> 00:01:33,580
And the web application I've chosen is Juice Shop, which is a great modern web app.

27
00:01:33,580 --> 00:01:38,880
And what we need to do is we need to launch a browser and proxy through ZAP.

28
00:01:38,880 --> 00:01:42,820
Now the easiest way is via this manual explore tab,

29
00:01:42,820 --> 00:01:45,760
because what this will do is this will launch the browser of our choice.

30
00:01:45,760 --> 00:01:49,180
I'm going to choose Firefox, not too surprisingly given my history.

31
00:01:49,180 --> 00:01:51,860
We support Chrome as well.

32
00:01:51,860 --> 00:01:55,000
And it sets ZAP sets the browser up.

33
00:01:55,000 --> 00:01:56,380
So it's proxying through ZAP.

34
00:01:56,380 --> 00:01:57,980
And it ignores certificate warnings.

35
00:01:57,980 --> 00:02:01,440
So we can just kick that off.

36
00:02:01,440 --> 00:02:05,500
And what we'll see is Firefox startup.

37
00:02:05,500 --> 00:02:07,900
And then we'll see Juice Shop.

38
00:02:07,900 --> 00:02:12,880
So this what I'm going to do is I'm just going to navigate around a bit.

39
00:02:12,880 --> 00:02:15,900
Look at various things.

40
00:02:15,900 --> 00:02:17,660
And actually I'm going to log in.

41
00:02:17,660 --> 00:02:19,220
Now I've already registered.

42
00:02:19,220 --> 00:02:23,820
So test@test.com

43
00:02:23,820 --> 00:02:24,820
and test123.

44
00:02:24,820 --> 00:02:25,820


45
00:02:26,380 --> 00:02:27,380
Hopefully that'll work.

46
00:02:27,380 --> 00:02:28,380
Yeah.

47
00:02:28,380 --> 00:02:29,380
So I'm now logged in.

48
00:02:29,380 --> 00:02:30,380
You can see my basket.

49
00:02:30,380 --> 00:02:31,380
There's nothing there.

50
00:02:31,380 --> 00:02:40,380
Now, Yiannis, as I'm wandering around this application, what can you tell me about what it's doing?

51
00:02:40,380 --> 00:02:43,380
Yeah, well, first of all, you can't really see much.

52
00:02:43,380 --> 00:02:44,380
Right?

53
00:02:44,380 --> 00:02:45,380
It's a modern web app.

54
00:02:45,380 --> 00:02:50,880
So straightaway, somebody who's either doing a penetration test or is inheriting this app

55
00:02:50,880 --> 00:02:54,380
from a development perspective gets to look after it.

56
00:02:54,380 --> 00:02:55,380
Doesn't know that's the OWASP Juice Shop.

57
00:02:55,380 --> 00:02:56,380


58
00:02:56,380 --> 00:02:57,380
Is browsing around.

59
00:02:57,380 --> 00:03:06,380
Should be able to notice that they don't have the immediate request response history that

60
00:03:06,380 --> 00:03:11,380
you would expect given how much functionality is being browsed around by you, Simon.

61
00:03:11,380 --> 00:03:12,380
So that's point number one.

62
00:03:12,380 --> 00:03:13,380
There's something else here.

63
00:03:13,380 --> 00:03:14,380
Right?

64
00:03:14,380 --> 00:03:19,380
So the question then is what's that something else and how do we tackle that from a coverage

65
00:03:19,380 --> 00:03:20,380
perspective?

66
00:03:20,380 --> 00:03:21,380
Right?

67
00:03:21,380 --> 00:03:22,380
Exactly.

68
00:03:22,380 --> 00:03:25,380
So have you noticed anything else about the application?

69
00:03:25,380 --> 00:03:26,380
Yes.

70
00:03:26,380 --> 00:03:29,380
So you have, so diving into the detail a little bit.

71
00:03:29,380 --> 00:03:31,380
So it's using fragments, right?

72
00:03:31,380 --> 00:03:36,380
We can see that there's the URL hashtag complain.

73
00:03:36,380 --> 00:03:39,380
That's an indication of a modern web app.

74
00:03:39,380 --> 00:03:45,380
Fragments typically involve parts of events functionality that stay within the browser.

75
00:03:45,380 --> 00:03:47,380
They're part of the JavaScript functionality.

76
00:03:47,380 --> 00:03:53,380
And that's a key indication that something is happening that you're not seeing used traditional

77
00:03:53,380 --> 00:03:55,380
proxy requests in terms of request response.

78
00:03:55,380 --> 00:04:02,380
The fragments staying in the browser, just a small digression there, historically have

79
00:04:02,380 --> 00:04:07,380
the penetration testing finding that you should not trust what's in the browser.

80
00:04:07,380 --> 00:04:12,380
Well, you know, that's all well and true, or that was all well and true in 2005 where

81
00:04:12,380 --> 00:04:18,380
we could say that, but it doesn't really abide by the modern standards of let's say Node.js

82
00:04:18,380 --> 00:04:20,380
plus all the other libraries that we have.

83
00:04:20,380 --> 00:04:22,380
JavaScript is here to stay.

84
00:04:22,380 --> 00:04:24,380
And we have the fragment functionality.

85
00:04:24,380 --> 00:04:29,380
And the question now is, let's make sure that we don't have vulnerable components.

86
00:04:29,380 --> 00:04:35,380
And what exactly is the trust that we're putting on the client side browser that this JavaScript

87
00:04:35,380 --> 00:04:39,380
is proxying through fragments?

88
00:04:39,380 --> 00:04:40,380
Right.

89
00:04:40,380 --> 00:04:41,380
Exactly.

90
00:04:41,380 --> 00:04:43,380
So as you said, it's difficult to see what's going on.

91
00:04:43,380 --> 00:04:45,380
And that's true of all web applications.

92
00:04:45,380 --> 00:04:50,380
So what we can do is, you know, this is one reason we have tools like ZAP.

93
00:04:50,380 --> 00:04:52,380
So we can see here from.

94
00:04:52,380 --> 00:04:58,380
ZAP, we have this sites tree and we have what we can see the web sockets and we can

95
00:04:58,380 --> 00:04:59,380
see the history as well.

96
00:04:59,380 --> 00:05:05,380
So these are all of the requests that have been made and you can see the request and

97
00:05:05,380 --> 00:05:06,380
response.

98
00:05:06,380 --> 00:05:11,380
So we gained lots of data and we can see ZAP's understanding of the structure of the web

99
00:05:11,380 --> 00:05:12,380
application.

100
00:05:12,380 --> 00:05:17,380
Now, one thing you'll notice here is we don't see all of these fragments.

101
00:05:17,380 --> 00:05:19,380
We don't see the pages.

102
00:05:19,380 --> 00:05:21,380
We're just seeing the requests and responses in the background.

103
00:05:21,380 --> 00:05:27,380
And I think you alluded to this earlier, Yiannis, but why are we not seeing the fragments

104
00:05:27,380 --> 00:05:28,380
in the sites tree?

105
00:05:28,380 --> 00:05:33,380
Well, the fragments are a part of the component that stay within the browser.

106
00:05:33,380 --> 00:05:37,380
So therefore, there's not a particular post request that's leaving the browser when you

107
00:05:37,380 --> 00:05:42,380
click on an event through JavaScript, right, that is triggering a server side response

108
00:05:42,380 --> 00:05:43,380
back.

109
00:05:43,380 --> 00:05:47,380
How that fragment works involves the client and the browser.

110
00:05:47,380 --> 00:05:49,380
Of course, there are callbacks as required.

111
00:05:49,380 --> 00:05:55,380
And it depends on the framework that's being used and the library.

112
00:05:55,380 --> 00:06:00,380
But more importantly, there's straightaway a recognition, right, within the first, I

113
00:06:00,380 --> 00:06:03,380
don't know, 10 minutes of using ZAP here.

114
00:06:03,380 --> 00:06:10,380
And imagine other tools don't do this so quickly that we are not seeing the full spectrum of

115
00:06:10,380 --> 00:06:12,380
what is there to be investigated, right?

116
00:06:12,380 --> 00:06:14,380
So that's the reason behind it.

117
00:06:14,380 --> 00:06:17,380
And straightaway, we know that there's something more there.

118
00:06:17,380 --> 00:06:18,380
Exactly.

119
00:06:18,380 --> 00:06:22,380
And it's actually part of the spec that fragments should not get sent to the server.

120
00:06:22,380 --> 00:06:26,380
So ZAP doesn't see them, which means, and we know with modern web applications, a lot

121
00:06:26,380 --> 00:06:30,380
more is happening in the client or the browser, as we call it.

122
00:06:30,380 --> 00:06:32,380
So that is why we've got something new.

123
00:06:32,380 --> 00:06:38,380
We have what we call a client map, which is here on the sites tree.

124
00:06:38,380 --> 00:06:43,380
And to start with, it actually looks very much like the sites map, except if I expand

125
00:06:43,380 --> 00:06:46,380
it, you will suddenly see these fragments.

126
00:06:46,380 --> 00:06:52,380
So we've got fragments, and we actually have a new client details tab here.

127
00:06:52,380 --> 00:06:56,380
And if I actually go down here, we have client history as well.

128
00:06:56,380 --> 00:07:01,380
So we suddenly have three new tabs, and they're giving us a lot more information.

129
00:07:01,380 --> 00:07:06,380
So what is happening here is we are getting information from the browser, directly from

130
00:07:06,380 --> 00:07:07,380
the browser.

131
00:07:07,380 --> 00:07:09,380
And I'll explain how that works later.

132
00:07:09,380 --> 00:07:15,380
And what happens is we're seeing the fragments, and we're building up a map of this application,

133
00:07:15,380 --> 00:07:17,380
the client side map.

134
00:07:17,380 --> 00:07:24,380
So we can see the different essentially pages, what would have been traditional pages.

135
00:07:24,380 --> 00:07:30,380
And you can see we actually, we've got information about buttons, input fields, links, lots

136
00:07:30,380 --> 00:07:32,380
of interesting information.

137
00:07:32,380 --> 00:07:38,380
So we can see all this information, and the history shows all of it streaming through.

138
00:07:38,380 --> 00:07:40,380
And it actually shows some extra information.

139
00:07:40,380 --> 00:07:43,380
So we can see nodes being added.

140
00:07:43,380 --> 00:07:45,380
So these are nodes dynamically added.

141
00:07:45,380 --> 00:07:46,380
Added to the web pages.

142
00:07:46,380 --> 00:07:50,380
We can see a button is being added, and the text is add to basket.

143
00:07:50,380 --> 00:07:52,380
And we can see DOM mutations.

144
00:07:52,380 --> 00:07:55,380
Now, so these are changes to the DOM.

145
00:07:55,380 --> 00:08:01,380
Now, we're not actually seeing the individual mutations, because if you actually streamed

146
00:08:01,380 --> 00:08:07,380
all the browser events to a tool like ZAP, your computer would hang because there's so

147
00:08:07,380 --> 00:08:08,380
many.

148
00:08:08,380 --> 00:08:12,380
So we get a summary of the number of mutations every so often.

149
00:08:12,380 --> 00:08:15,380
But we see things like nodes added.

150
00:08:15,380 --> 00:08:21,380
So we can see input events or input fields, buttons, links, all these fun kind of things.

151
00:08:21,380 --> 00:08:24,380
We can see pages being loaded and unloaded.

152
00:08:24,380 --> 00:08:28,380
And particularly interesting if you have a look here on the client map, we actually see

153
00:08:28,380 --> 00:08:29,380
things like cookies.

154
00:08:29,380 --> 00:08:31,380
I mean, ZAP sees the cookies as well.

155
00:08:31,380 --> 00:08:35,380
But we see local storage and session storage.

156
00:08:35,380 --> 00:08:37,380
There we are.

157
00:08:37,380 --> 00:08:40,380
So we can see local storage and session storage.

158
00:08:40,380 --> 00:08:44,380
So this is information that traditionally has stayed in the browser.

159
00:08:44,380 --> 00:08:47,380
And your security tool would not have access to this at all.

160
00:08:47,380 --> 00:08:49,380
So this is brand new information.

161
00:08:49,380 --> 00:08:55,380
And what you'll see is we can actually, if you right click on these things, we get a

162
00:08:55,380 --> 00:08:56,380
set of options.

163
00:08:56,380 --> 00:08:59,380
At the moment, it's only the client map has the right click option.

164
00:08:59,380 --> 00:09:04,380
We can copy the URLs to the clipboard, so we can select a whole load of them.

165
00:09:04,380 --> 00:09:06,380
We can open the browser.

166
00:09:06,380 --> 00:09:10,380
So I can actually just go and write, I want to open that particular URL in the browser.

167
00:09:10,380 --> 00:09:13,380
And you'll see we actually go straight to the basket there.

168
00:09:13,380 --> 00:09:20,380
So we are taking, we're actually using the whole URL, which is also shown at the top

169
00:09:20,380 --> 00:09:21,380
here.

170
00:09:21,380 --> 00:09:25,380
And what else we've got, we can show it in the sites tree.

171
00:09:25,380 --> 00:09:28,380
Now that will actually, will show us the nearest part.

172
00:09:28,380 --> 00:09:31,380
Obviously, we don't have the fragment in the sites tree.

173
00:09:31,380 --> 00:09:32,380
So you don't get that.

174
00:09:32,380 --> 00:09:35,380
This is, this is really interesting, right?

175
00:09:35,380 --> 00:09:41,380
Because the, it's not that the fragment doesn't exist on the server side, but as you correctly

176
00:09:41,380 --> 00:09:43,380
said, according to the specs.

177
00:09:43,380 --> 00:09:45,380
And the same applies for local storage.

178
00:09:45,380 --> 00:09:48,380
You can look up the HTML5 spec there.

179
00:09:48,380 --> 00:09:53,380
The hashtag basket location exists as part of the client map.

180
00:09:53,380 --> 00:10:00,380
And the closest request as part of the site map is then being offered back by ZAP.

181
00:10:00,380 --> 00:10:05,380
So why is that important if you are somebody who's attacking this application?

182
00:10:05,380 --> 00:10:11,380
It's important because then you know that any event or similar functionality that is

183
00:10:11,380 --> 00:10:12,380
leaving that specific fragment.

184
00:10:12,380 --> 00:10:18,380
Requesting to communicate with the server is likely going to come from this location

185
00:10:18,380 --> 00:10:19,380
on the site map, right?

186
00:10:19,380 --> 00:10:25,380
So you know where to focus your attack vector, if you like.

187
00:10:25,380 --> 00:10:26,380
Exactly.

188
00:10:26,380 --> 00:10:27,380
Thank you.

189
00:10:27,380 --> 00:10:30,380
So this is the information we've got at the moment.

190
00:10:30,380 --> 00:10:36,380
And so I'll explain how you get this because this is not built into ZAP 2.14 yet.

191
00:10:36,380 --> 00:10:39,380
Well, it's not built into ZAP 2.14 at all.

192
00:10:39,380 --> 00:10:40,380
It is a new add-on.

193
00:10:40,380 --> 00:10:41,380


194
00:10:41,380 --> 00:10:44,380
It's called client-side integration.

195
00:10:44,380 --> 00:10:50,380
It exposes client browser-side information in ZAP using Firefox and Chrome extensions.

196
00:10:50,380 --> 00:10:51,380
So that's how it's working.

197
00:10:51,380 --> 00:10:53,380
And I'll show that a bit more.

198
00:10:53,380 --> 00:10:55,380
So you will need to install it from the ZAP marketplace.

199
00:10:55,380 --> 00:10:57,380
Obviously, I've got it installed here.

200
00:10:57,380 --> 00:11:00,380
And at the moment, it is very early stage.

201
00:11:00,380 --> 00:11:03,380
So it's alpha status.

202
00:11:03,380 --> 00:11:07,380
It is exposing information, which can be very useful for a pentester.

203
00:11:07,380 --> 00:11:09,380
But there is an extra thing that it has got.

204
00:11:09,380 --> 00:11:14,380
Which will provide value to some of you.

205
00:11:14,380 --> 00:11:23,380
So with modern web applications, if you're automating testing against them, you will probably be using the ZAP Ajax Spider.

206
00:11:23,380 --> 00:11:30,380
So the Ajax Spider launches browsers and is controlled by Selenium and clicks on things, fills in forms.

207
00:11:30,380 --> 00:11:36,380
So that's how we can cope with modern web apps with a browser because that's the only way you can really do it.

208
00:11:36,380 --> 00:11:38,380
Now, we know that the Ajax Spider is pretty good.

209
00:11:38,380 --> 00:11:43,380
But there are some client components that it struggles with.

210
00:11:43,380 --> 00:11:50,380
So particularly if you've got an element in a page which is not reachable, Selenium will try and get to it and get an error.

211
00:11:50,380 --> 00:11:53,380
And there are certain ones where it's just too difficult.

212
00:11:53,380 --> 00:11:57,380
Or maybe it's not even exposed by the UI but is in the DOM.

213
00:11:57,380 --> 00:12:01,380
And the client, the Ajax Spider doesn't look at the DOM.

214
00:12:01,380 --> 00:12:06,380
The client add-on does look in the DOM.

215
00:12:06,380 --> 00:12:07,380
So one thing you'll see here.

216
00:12:07,380 --> 00:12:14,380
One thing you'll see here is we've actually got some nodes here which don't have information.

217
00:12:14,380 --> 00:12:17,380
If you can see, they've got a small red minus.

218
00:12:17,380 --> 00:12:19,380
And that means we haven't visited them yet.

219
00:12:19,380 --> 00:12:27,380
And what's happened is we found the client add-on has found these in the DOM and then has told ZAP about them.

220
00:12:27,380 --> 00:12:29,380
We know they haven't been visited.

221
00:12:29,380 --> 00:12:33,380
And if you run the Ajax Spider with a client integration add-on installed,

222
00:12:33,380 --> 00:12:37,380
then the client add-on will see that the Ajax Spider,

223
00:12:37,380 --> 00:12:42,380
started it will then wait to the end and then report any URLs that it hasn't found.

224
00:12:42,380 --> 00:12:44,380
It will actually request them as well.

225
00:12:44,380 --> 00:12:49,380
So we're actually going to make the Ajax Spider results slightly better.

226
00:12:49,380 --> 00:12:54,380
What I can show you, if I just drag another browser in.

227
00:12:54,380 --> 00:12:58,380
So if you go to zaproxy.org and go to documentation,

228
00:12:58,380 --> 00:13:01,380
then towards the end, you'll see test scans.

229
00:13:01,380 --> 00:13:06,380
So we run ZAP against a set of deliberately vulnerable applications,

230
00:13:06,380 --> 00:13:08,380
either nightly or weekly.

231
00:13:08,380 --> 00:13:11,380
And one of them is Google Security Crawl Maze.

232
00:13:11,380 --> 00:13:16,380
So this is designed by Google to be difficult to explore.

233
00:13:16,380 --> 00:13:22,380
And what we've been doing is we've been testing both the standard and the Ajax Spider against this.

234
00:13:22,380 --> 00:13:27,380
And as you can see, there's certain things the standard Spider actually finds quite a lot.

235
00:13:27,380 --> 00:13:31,380
But the Ajax Spider will find some things that the standard Spider doesn't.

236
00:13:31,380 --> 00:13:35,380
And you'll also see now we've got this client column.

237
00:13:35,380 --> 00:13:43,380
Now, this is just the nodes, the URLs that the client add-on found that the Ajax Spider didn't.

238
00:13:43,380 --> 00:13:47,380
So if the Ajax Spider found it, then the client add-on will have seen it as well.

239
00:13:47,380 --> 00:13:49,380
So we're ignoring those.

240
00:13:49,380 --> 00:13:54,380
We're just reporting the things that the client add-on will find that were not found by the Ajax Spider.

241
00:13:54,380 --> 00:13:59,380
And you see in some cases they were found by the standard Spider, but not by the Ajax one.

242
00:13:59,380 --> 00:14:05,380
So if you have a modern web application and you know that the Ajax Spider,

243
00:14:05,380 --> 00:14:08,380
isn't exploring it as effectively as you think it should be,

244
00:14:08,380 --> 00:14:11,380
then try the client add-on and see if that actually improves it for you.

245
00:14:11,380 --> 00:14:15,380
Because we know in certain cases it will.

246
00:14:15,380 --> 00:14:19,380
And if it doesn't, let us know.

247
00:14:19,380 --> 00:14:21,380
So it's very true, Simon. Very true.

248
00:14:21,380 --> 00:14:24,380
So just a minute on theory on this, right?

249
00:14:24,380 --> 00:14:27,380
So if we look at the definition of an Ajax Spider, as you said,

250
00:14:27,380 --> 00:14:33,380
basically we're referring to an asynchronous JavaScript and XML technology, right?

251
00:14:33,380 --> 00:14:36,380
And that crawling is dependent on the queries of the DOM

252
00:14:36,380 --> 00:14:41,380
based on functionality that involves clicking and drabbing around the website.

253
00:14:41,380 --> 00:14:49,380
Selenium or any application can only guess the asynchronous functionality if it can't reach it.

254
00:14:49,380 --> 00:14:53,380
And that's where the plugin that you just referenced comes in.

255
00:14:53,380 --> 00:14:58,380
That interaction is complete by inspection of the document object model or DOM.

256
00:14:58,380 --> 00:15:03,380
And that then gives you the extra coverage that you just demonstrated.

257
00:15:03,380 --> 00:15:07,380
For a variety of different websites, including the Google Maze.

258
00:15:07,380 --> 00:15:12,380
Exactly. So what we're talking about, I will actually launch Firefox again,

259
00:15:12,380 --> 00:15:17,380
because the key thing here is if you have a look here,

260
00:15:17,380 --> 00:15:20,380
we have the extensions and this is how it all works.

261
00:15:20,380 --> 00:15:23,380
We have the ZAP browser extension.

262
00:15:23,380 --> 00:15:29,380
Now, you will notice that this can always read and change data on this site.

263
00:15:29,380 --> 00:15:32,380
This is a little bit surprising if you've played around with extensions,

264
00:15:32,380 --> 00:15:35,380
because it is actually difficult.

265
00:15:35,380 --> 00:15:40,380
Firefox doesn't allow extensions to have full access to all websites.

266
00:15:40,380 --> 00:15:48,380
Now, so the ZAP browser extension is available on the Firefox and Chrome stores.

267
00:15:48,380 --> 00:15:52,380
So what I would call add-ons.mozilla.org and the Chrome extensions.

268
00:15:52,380 --> 00:15:57,380
And we've had to do some reverse engineering on how Firefox actually handles security

269
00:15:57,380 --> 00:15:59,380
in order to get this to work.

270
00:15:59,380 --> 00:16:02,380
So if you ever notice a dot there,

271
00:16:02,380 --> 00:16:05,380
then there may be a problem and let us know

272
00:16:05,380 --> 00:16:08,380
because it's taken a little bit of while to get this working.

273
00:16:08,380 --> 00:16:11,380
But you will see we have this browser extension

274
00:16:11,380 --> 00:16:16,380
and this actually allows us to record events in the browser as well.

275
00:16:16,380 --> 00:16:20,380
I'm not going to cover this now because that's actually a Google Summer of Code project.

276
00:16:20,380 --> 00:16:24,380
And hopefully the student will do the video on that themselves.

277
00:16:24,380 --> 00:16:26,380
If not, I will do another video.

278
00:16:26,380 --> 00:16:28,380
And we do have various options.

279
00:16:28,380 --> 00:16:32,380
So you can install this add-on yourself.

280
00:16:32,380 --> 00:16:35,380
But then you would have to set up the...

281
00:16:35,380 --> 00:16:40,380
So if you don't want to launch Firefox or Chrome from ZAP,

282
00:16:40,380 --> 00:16:43,380
then you will need to configure some information.

283
00:16:43,380 --> 00:16:50,380
This is another reason why it's much better to launch your browsers through ZAP

284
00:16:50,380 --> 00:16:56,380
because then we can actually ensure that the relevant extensions are installed

285
00:16:56,380 --> 00:16:58,380
and working as correctly.

286
00:16:58,380 --> 00:17:01,380
And I'll just go and launch Chrome as well

287
00:17:01,380 --> 00:17:06,380
because I'm feeling lucky and haven't tried this.

288
00:17:06,380 --> 00:17:08,380
Sometimes it takes a little while.

289
00:17:08,380 --> 00:17:11,380
I think the web drive is just updated.

290
00:17:11,380 --> 00:17:17,380
And only this week we had the approval on the Chrome plugin update.

291
00:17:17,380 --> 00:17:18,380
Is that correct?

292
00:17:18,380 --> 00:17:19,380
Exactly.

293
00:17:19,380 --> 00:17:29,380
So what we do is we have to submit these extensions to both Firefox and Chrome.

294
00:17:29,380 --> 00:17:30,380
And Firefox,

295
00:17:30,380 --> 00:17:32,380
the approval is pretty quick,

296
00:17:32,380 --> 00:17:34,380
but the Chrome one isn't as quick.

297
00:17:34,380 --> 00:17:39,380
So we do know that it takes a little while before we actually see

298
00:17:39,380 --> 00:17:41,380
before that gets approved.

299
00:17:41,380 --> 00:17:43,380
So we can see it's coming up.

300
00:17:43,380 --> 00:17:48,380
And what you'll see is we have the ZAP browser extension here,

301
00:17:48,380 --> 00:17:50,380
which looks very similar.

302
00:17:50,380 --> 00:17:52,380
So we have the same information.

303
00:17:52,380 --> 00:17:55,380
And it's just taking a little bit longer to load here.

304
00:17:55,380 --> 00:17:57,380
But yeah.

305
00:17:57,380 --> 00:17:59,380
So and of course,

306
00:17:59,380 --> 00:18:01,380
all of this stuff is open source.

307
00:18:01,380 --> 00:18:07,380
So there is you can look at the source code for the extension

308
00:18:07,380 --> 00:18:08,380
and all of ZAP,

309
00:18:08,380 --> 00:18:09,380
of course.

310
00:18:09,380 --> 00:18:11,380
And that's probably about it.

311
00:18:11,380 --> 00:18:12,380
I mean,

312
00:18:12,380 --> 00:18:15,380
one thing to say is future plans.

313
00:18:15,380 --> 00:18:16,380
Right now,

314
00:18:16,380 --> 00:18:20,380
we're exposing information and getting more information from the DOM

315
00:18:20,380 --> 00:18:23,380
to make the Ajax spider better.

316
00:18:23,380 --> 00:18:27,380
But we do have plans to do both passive scanning on the client side

317
00:18:27,380 --> 00:18:28,380
and active scanning as well.

318
00:18:28,380 --> 00:18:33,380
Obviously DOM XSS is going to be one of the top ones for that.

319
00:18:33,380 --> 00:18:36,380
But if you've got any other suggestions of any other functionality you

320
00:18:36,380 --> 00:18:38,380
would like to be included,

321
00:18:38,380 --> 00:18:39,380
then please let us know.

322
00:18:39,380 --> 00:18:41,380
There's loads of ways to get in touch with us.

323
00:18:41,380 --> 00:18:43,380
Have a look at zaproxy.org.

324
00:18:43,380 --> 00:18:44,380
We've got a user group,

325
00:18:44,380 --> 00:18:45,380
a developer group.

326
00:18:45,380 --> 00:18:46,380
You can find us on Twitter,

327
00:18:46,380 --> 00:18:48,380
which should be very easy to find,

328
00:18:48,380 --> 00:18:49,380
particularly myself.

329
00:18:49,380 --> 00:18:52,380
That's it for the client add-on as it stands at the moment.

330
00:18:52,380 --> 00:18:53,380
Obviously,

331
00:18:53,380 --> 00:18:55,380
there's a lot more to do.

332
00:18:55,380 --> 00:18:57,380
Please let us know in comments

333
00:18:57,380 --> 00:18:59,380
in the video below,

334
00:18:59,380 --> 00:19:00,380
on YouTube,

335
00:19:00,380 --> 00:19:02,380
or get in touch any other way,

336
00:19:02,380 --> 00:19:03,380
what you think about this,

337
00:19:03,380 --> 00:19:05,380
any suggestions you've got,

338
00:19:05,380 --> 00:19:08,380
and if you'd like us to cover anything else in the future.

339
00:19:08,380 --> 00:19:10,380
Thank you very much.

