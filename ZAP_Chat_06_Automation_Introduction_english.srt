1
00:00:00,000 --> 00:00:12,480
Hello and welcome to another ZAP Chat video. Once again, I am joined with by Yiannis.

2
00:00:12,480 --> 00:00:13,920
Hello.

3
00:00:13,920 --> 00:00:20,820
So this week we are going to be covering automation. What I want to do is give an

4
00:00:20,820 --> 00:00:25,800
introduction to ZAP automation, kind of explain what all the options are and why

5
00:00:25,800 --> 00:00:31,620
you might want to use them. So what I do is I'm going to share my screen straight

6
00:00:31,620 --> 00:00:38,460
away because what I'll do is switch over to my browser and show you the ZAP

7
00:00:38,460 --> 00:00:48,080
website and if you go to documentation then go to automate then you will see

8
00:00:48,080 --> 00:00:54,680
make that a little bit can I zoom in on that remember the keys yeah so there

9
00:00:54,680 --> 00:00:55,780
you'll see the list of automation options.

10
00:00:55,780 --> 00:01:03,940
Now that's not all there is to it otherwise we'd kind of have to stop here so what I want

11
00:01:03,940 --> 00:01:10,160
to do is kind of go through these options and explain what they're useful for actually

12
00:01:10,160 --> 00:01:15,700
demo most demo most of them as well but one thing I think we've got a lot of options and

13
00:01:15,700 --> 00:01:21,780
one of the reasons is because we've got ZAP is has a lot of functionality and when you're

14
00:01:21,780 --> 00:01:25,620
automating ZAP we found out that some people want some very simple options and some people

15
00:01:25,620 --> 00:01:25,760


16
00:01:25,780 --> 00:01:31,600
want some very complicated things and therefore what we're looking at is trying to have a balance

17
00:01:31,600 --> 00:01:38,480
between ease of use and flexibility and functionality. So for the demo I'm actually

18
00:01:38,480 --> 00:01:46,740
going to run I'm running the weekly so it's the latest weekly and let me find a so I will just

19
00:01:46,740 --> 00:01:54,980
start up the ZAP GUI just to try and make a little bit of a point and what I want to do is one of the

20
00:01:54,980 --> 00:01:55,620


21
00:01:55,620 --> 00:02:01,440
options here is to show all of the tabs and you can now see there's

22
00:02:01,440 --> 00:02:09,620
Lots of tabs.. Yeah.. so if you think each one of those tabs is equivalent to a tool within ZAP

23
00:02:09,620 --> 00:02:17,880
so ZAP is it's almost like an IDE or you could say it's an integrated hacking environment so

24
00:02:17,880 --> 00:02:23,900
it is very complex and it's complex because it has to do hard things finding security vulnerabilities

25
00:02:23,900 --> 00:02:25,460


26
00:02:25,460 --> 00:02:31,180
in web applications is hard and you know do well you have to do you really need a manual pentester

27
00:02:31,180 --> 00:02:39,760
like Yiannis for example but so we have lots of options for manual pentesters but what we try

28
00:02:39,760 --> 00:02:45,640
and do is we try and make as many of these options automatable as possible and if I'll just go and

29
00:02:45,640 --> 00:02:52,200
have a look at the options screen here and go through you'll see there are lots and lots of

30
00:02:52,200 --> 00:03:03,860
options. Configuration Parameters, right? Yeah, so this means ZAP is really tunable but it also means that if you're running ZAP from

31
00:03:03,860 --> 00:03:09,620
the command line there's a huge amount of things you could configure so it's how do we actually

32
00:03:09,620 --> 00:03:19,700
make that usable while still being helpful. So the very first one we took on that list

33
00:03:19,700 --> 00:03:21,780
switch back

34
00:03:22,200 --> 00:03:27,860
is ZAPit. So Yiannis you know about ZAPit don't you? Do you want to give a quick summary?

35
00:03:28,780 --> 00:03:33,500
One or two things the whole idea is that we issue one request get one response back now it might be

36
00:03:33,500 --> 00:03:39,360
a 302 when we direct etc but the page that we get back we analyze to the fullest possible extent

37
00:03:39,360 --> 00:03:46,860
and you get a feel of what application you're up against by looking at a single view a single page

38
00:03:47,080 --> 00:03:52,160
the question is have you zapped your website that's where ZAPit comes from and we can

39
00:03:52,160 --> 00:03:52,180


40
00:03:52,180 --> 00:03:57,100
see now Simon that it's a command line option correct? It is yeah we don't actually have a

41
00:03:57,100 --> 00:04:03,900
GUI option for it so I'm going to run it from the command line and actually what I'll do is I'm going

42
00:04:03,900 --> 00:04:09,280
to show you this really exciting test page that I've created and it says it's a very simple page

43
00:04:09,280 --> 00:04:16,900
absolutely nothing. HTML - I haven't seen that in years. Yeah so the reason I've done this is because I

44
00:04:16,900 --> 00:04:22,080
want to demo all of these options and if we had a proper website there it would take too long.

45
00:04:22,180 --> 00:04:28,140
You know full scans of using ZAP take a while because you know there's a lot of functionality

46
00:04:28,140 --> 00:04:34,420
to test. So what I'm do is I'm going to run ZAP from the command line I'm using a I'm using

47
00:04:34,420 --> 00:04:40,620
the minus dir option because then that keeps ZAP's configuration separate and it keeps separate from

48
00:04:40,620 --> 00:04:46,380
my dev environment where I'm doing all sorts of horrible things. I'm starting ZAP on a different

49
00:04:46,380 --> 00:04:52,140
port because I've got tomcat on 8080 and I don't want to clash with that. Minus command because

50
00:04:52,140 --> 00:05:01,120
I'm doing this on the command line minus ZAPit and the target url and we'll see very quickly that

51
00:05:01,120 --> 00:05:08,280
it's made one request and it got a 200. I haven't actually got the wappalizer add-on installed so

52
00:05:08,280 --> 00:05:14,720
it can't tell you what technology involved. Five alerts it's found on the root page it's found

53
00:05:14,720 --> 00:05:20,960
eight html tags no fields. So this is and you know if you're interested in this ZAPit scan

54
00:05:20,960 --> 00:05:22,120
then 

55
00:05:22,140 --> 00:05:25,480
we actually recorded another video on it so keep going watch that for more details.

56
00:05:26,000 --> 00:05:32,940
The idea as Yiannis said it's a very quick tell me about this stuff. So great but it's not really

57
00:05:32,940 --> 00:05:36,200
good for finding you know you're not going to find a cross-site scripting vulnerabilities

58
00:05:36,200 --> 00:05:44,300
all of these things SQL injection that's not what ZAPit is for. So yeah this is simple and effective

59
00:05:44,300 --> 00:05:48,480
but of limited use or limited functionality.

60
00:05:49,740 --> 00:05:52,040
Now the next one is the

61
00:05:52,040 --> 00:05:52,120


62
00:05:52,140 --> 00:05:57,160
quick start command line and that is actually a little bit similar but it does a bit

63
00:05:57,160 --> 00:06:05,680
more. Now.. One more exciting? So if I just do actually let me get back to get those options

64
00:06:05,680 --> 00:06:13,840
still and just do minus h then that should give me all of the command line options. Now we don't

65
00:06:13,840 --> 00:06:19,760
actually list these anywhere on the website because we have a set of command line options

66
00:06:19,760 --> 00:06:22,040
that are available in the core and then every single

67
00:06:22,040 --> 00:06:24,580
add-on can add their own command line options if they need to.

68
00:06:25,460 --> 00:06:29,340
So the options you've got available will depend on which add-ons you've got installed.

69
00:06:31,100 --> 00:06:36,020
Now if you ever scroll down somewhere you will see we've actually got

70
00:06:37,540 --> 00:06:43,620
this quick url quick out and quick progress. So what I'm going to do is

71
00:06:46,900 --> 00:06:51,700
make sure I can see what I'm doing now. So I'm actually going to change this to quick url.

72
00:06:52,040 --> 00:06:57,460
And run it again.

73
00:06:59,020 --> 00:07:02,940
Now a few things here are going to be slightly different right even though we're scanning a

74
00:07:02,940 --> 00:07:08,700
single page we've actually triggered the spider. This is not the AJAX spider this is the

75
00:07:08,700 --> 00:07:13,400
like a good old basic spider.. Exactly!.. either in beforehand.

76
00:07:14,140 --> 00:07:17,640
Yeah it's traditional spider and what you'll see is we've actually dumped out

77
00:07:17,640 --> 00:07:20,920
an xml report on the command line.

78
00:07:20,920 --> 00:07:28,540
How helpful is this? I don't know but you'll see we actually have this quick out file name

79
00:07:28,540 --> 00:07:34,620
so you can actually choose to put the report to a file which is probably more useful and you can

80
00:07:34,620 --> 00:07:40,020
actually choose whether you have the standard html json markdown or xml results based on the file

81
00:07:40,020 --> 00:07:45,860
extension. We've also got a quick progress option and this just kind of shows you how far it's

82
00:07:45,860 --> 00:07:50,900
getting along. So this is useful it's 

83
00:07:50,920 --> 00:07:55,740
give you more information than ZAPit. But depending on the website could take a lot longer.

84
00:07:56,780 --> 00:08:03,180
But as Yannis said it uses traditional spider there's no option for the AJAX spider and no

85
00:08:03,180 --> 00:08:09,140
other options really that's about it. So it is very quick or quick to use not necessarily quick

86
00:08:09,140 --> 00:08:12,900
to run and has limited functionality.

87
00:08:14,900 --> 00:08:20,900
So what's next? We have these docker package scans and we have

88
00:08:20,920 --> 00:08:25,160
GitHub actions which I'll kind of treat them as the same because the GitHub actions

89
00:08:25,160 --> 00:08:31,480
are just wrappers around the docker package scans. And the docker package scans actually provide

90
00:08:32,120 --> 00:08:38,520
quite a bit more functionality. So we have this docker user guide and we have three different

91
00:08:38,520 --> 00:08:44,600
types of scan. We have the baseline scan, the full scan and the API scan. So let me just go and

92
00:08:45,240 --> 00:08:50,780
kick these off. What I'll do is... It's getting more interesting here now we have the

93
00:08:50,780 --> 00:08:55,980
option to specify what type of scan we're going to get back right? Yeah exactly. So

94
00:08:58,300 --> 00:09:05,340
I'm going to run the baseline scan and so I'm running docker and I'm going to use the

95
00:09:05,980 --> 00:09:09,100
zap weekly and can you can you guess what's going to happen here?

96
00:09:16,220 --> 00:09:20,300
It's a trick question by the way. So first of all you'll see we're actually using the automation

97
00:09:21,340 --> 00:09:26,200
framework..I don't think that's the answer were looking for. 

98
00:09:26,200 --> 00:09:41,620
No I'm just waiting to see whether it because I'm expecting this to fail can you tell me why it's going to fail? You're passing a URL..the port is right..

99
00:09:41,620 --> 00:09:44,940
The Problem is local Host because the package scans run in docker and I'm running my Tomcat on locally and

100
00:09:44,940 --> 00:09:48,300
the package scans run in docker

101
00:09:48,300 --> 00:09:49,100
and I'm 

102
00:09:49,100 --> 00:09:58,720
running my tomcat on locally and so docker cannot actually access local host yes so this is actually

103
00:09:58,720 --> 00:10:07,140
a docker problem or feature if you like it is not something that is under our control

104
00:10:07,140 --> 00:10:14,780
so what we need to do is we need to find out what URL is accessible to docker and there's various

105
00:10:14,780 --> 00:10:22,840
all will depend on your operating system but on the Mac i can actually find out my local URL there

106
00:10:22,840 --> 00:10:31,840
and i can then actually use that and place this in. Now if your target app is actually in another

107
00:10:31,840 --> 00:10:37,060
docker container on the same machine again you'll have similar problems but there are different ways

108
00:10:37,060 --> 00:10:44,760
around that we've got more details on the website and i'll just mention again so the fact we're

109
00:10:44,760 --> 00:10:51,000
using the automation framework we are actually porting or we're migrating the package scans

110
00:10:51,000 --> 00:10:57,680
to use of the automation framework because it actually provides more flexibility and means

111
00:10:57,680 --> 00:11:05,900
it's easier for us to maintain. So one thing you'll notice is we've actually found a total of 33 URLs

112
00:11:05,900 --> 00:11:12,760
which is surprising because it is just one page on the app and you can actually see all of the

113
00:11:13,580 --> 00:11:13,960


114
00:11:13,960 --> 00:11:22,400
passive scan rules that ZAP has run and that have passed. So what what happens with the package scans

115
00:11:22,400 --> 00:11:29,640
is they will by default use all of the scan rules you have available. So if you've just got the

116
00:11:29,640 --> 00:11:35,980
the release quality ones then those will just be those but you've got

117
00:11:35,980 --> 00:11:40,080
beta status and alpha status they will be used as well by default.

118
00:11:40,080 --> 00:11:43,940
So that's an important point and Simon

119
00:11:43,960 --> 00:11:49,180
just real quickly where have we specified in the command line options that this is a baseline scan

120
00:11:49,180 --> 00:11:56,700
if you don't mind just showing us that? It was actually there so zapbaseline.py so it's a python

121
00:11:56,700 --> 00:12:02,240
file it's a python python script. Very important right so all the baseline scans as part of the

122
00:12:02,240 --> 00:12:07,040
automation sorry all the scans as part of the automation framework are specified in a python

123
00:12:07,040 --> 00:12:11,880
format and you can see them in the command line. In the package scans so these are the package scans which

124
00:12:11,880 --> 00:12:13,300
happens to use the automation framework.

125
00:12:13,960 --> 00:12:22,080
Correct yeah yep. Yeah exactly and what you'll see is we then have these warnings and we're actually

126
00:12:22,080 --> 00:12:29,300
warning on things on slash docs so that's why we're actually running the spider on the from

127
00:12:29,300 --> 00:12:35,320
the root of the directory rather from the url we actually specified and that's for historical

128
00:12:35,320 --> 00:12:40,000
reasons and a few different cases we found where it causes a lot of problems not doing that.

129
00:12:40,960 --> 00:12:43,720
So we found a whole load of things and we got

130
00:12:43,960 --> 00:12:49,840
you'll see down here we've got different things like fail-new, fail-inpro inprog in progress,

131
00:12:49,840 --> 00:12:57,940
warn-new, warn-inprog, ignore and pass so there's actually quite a lot more things going on here.

132
00:12:57,940 --> 00:13:05,640
I switch back and we'll have a look at the docker user guide that kind of explains

133
00:13:05,640 --> 00:13:12,480
various you know that's kind of an overview but if we go into the baseline scan we'll see that

134
00:13:12,480 --> 00:13:18,700
there's actually a lot of we have a lot of options here and you can actually see all of those so if i

135
00:13:18,700 --> 00:13:28,860
go just put baseline minus h then that should give the same list um so one thing you can do

136
00:13:28,860 --> 00:13:36,340
is you can specify a configuration file and this actually allows you to change which of the rules

137
00:13:36,340 --> 00:13:42,460
apply or which of them fail or you or warn or ignore. So we scroll down here

138
00:13:42,480 --> 00:13:49,120
we'll see an example configuration file and what you can do you can actually there's an option to

139
00:13:49,120 --> 00:13:54,240
generate a configuration file from the command line as well and by default everything is warn

140
00:13:54,240 --> 00:14:00,420
and you can then edit this file it's just a text file tab separated and you can change that to fail

141
00:14:00,420 --> 00:14:08,960
or ignore and then that will change how the package scan works... Right, right. ..and then you'll

142
00:14:08,960 --> 00:14:12,300
see we've got options for reporting again

143
00:14:12,480 --> 00:14:19,880
similar to the quick start option it's the standard html, markdown xml or json reports so

144
00:14:19,880 --> 00:14:25,800
we can't specify any format you like there's a limit there we've got an option to include

145
00:14:25,800 --> 00:14:31,560
passive scan rules and there's an option to include the AJAX spider as well and various

146
00:14:31,560 --> 00:14:37,640
other things so you've got delays and there's quite a few extra options and if you actually

147
00:14:37,640 --> 00:14:42,460
you can actually specify a context file and if you do that then you can also specify a user

148
00:14:42,480 --> 00:14:47,360
but you have to configure this context file separately probably via ZAP.

149
00:14:47,360 --> 00:14:54,520
So it's very important to tie this into the earlier if you like basic functionality let's

150
00:14:54,520 --> 00:14:59,560
say you've ZAPit right ideally you want to be checking during ZAPit what the milliseconds

151
00:14:59,560 --> 00:15:06,560
are of the request response if you're going to be specifying any timeouts in the advanced scan

152
00:15:06,560 --> 00:15:11,980
and generally you want to be ready to go from a baseline perspective before you get into the

153
00:15:11,980 --> 00:15:12,460
even more advanced scan and then you want to be ready to go from a baseline perspective

154
00:15:12,480 --> 00:15:16,160
before you get into the more advanced stuff that simon's about to show us. Yeah and one thing we've

155
00:15:16,160 --> 00:15:23,360
got is we actually have limits on how you know how long to spied for example because the baseline is

156
00:15:23,360 --> 00:15:29,840
actually um so when i was working at mozilla we configured the baseline scan to run on every

157
00:15:29,840 --> 00:15:35,440
pull request on some of our repos. So this will actually finish within a few within a couple

158
00:15:35,440 --> 00:15:38,480
of minutes so it's something that you can use within CI/CD.

159
00:15:41,680 --> 00:15:42,320
So one of the

160
00:15:42,480 --> 00:15:49,280
options we have is so we've got the API scan and that i'm not going to demo because

161
00:15:50,560 --> 00:15:57,040
by example that doesn't have an API definition but this supports OpenAPI, Soap and GraphQL

162
00:15:58,400 --> 00:16:01,840
and we'll probably have postman support coming very soon hopefully.

163
00:16:03,520 --> 00:16:10,800
So but the other one then is the full scan so what i'll do is go back to here and then

164
00:16:12,480 --> 00:16:20,240
run the full scan

165
00:16:20,880 --> 00:16:25,000
and this shouldn't take much longer because it's only that single page

166
00:16:25,100 --> 00:16:30,680
but and it we will not be a even though we'll be spidering from the root we will not

167
00:16:30,780 --> 00:16:35,320
be attacking everything so we'll only be attacking the the example page that i've generated

168
00:16:35,420 --> 00:16:41,600
but if i switch back then you'll see the full scan has very similar options

169
00:16:41,600 --> 00:16:48,920
and in fact the configuration file can also include the active scan rules as well as the

170
00:16:48,920 --> 00:16:57,420
passive scan rules. So and again the the minus a option will include the alpha active and passive

171
00:16:57,420 --> 00:17:02,800
scan rules the package scans actually always include the beta scan rules again for historical

172
00:17:02,800 --> 00:17:09,880
purposes. Very important, yeah. So we're expecting a lot more verbosity and a lot more output

173
00:17:09,880 --> 00:17:16,720
with this type of scan right? Normally yes, but in this particular case we're not expecting it

174
00:17:16,720 --> 00:17:22,360
because there's not much functionality there, but this is we're actually attacking the application

175
00:17:22,360 --> 00:17:28,560
and this is one reason why i didn't want to use example.com because i don't have permission to

176
00:17:28,560 --> 00:17:35,180
attack example.com something like the baseline scan is absolutely fine, but the the full scan

177
00:17:35,180 --> 00:17:38,120
is is not acceptable you shouldn't be doing that if you don't have permission.

178
00:17:38,120 --> 00:17:44,760
Yeah and something on time real quickly i i remember when i was training our red team

179
00:17:44,760 --> 00:17:52,060
and they would have a real big problem in scaling in terms of time how they attacked an application

180
00:17:52,060 --> 00:17:57,460
and that would be because you know just imagine that you have x number of fields available right

181
00:17:57,460 --> 00:18:01,920
and you need to check them all for SQL injection well that's one check right but if you have

182
00:18:01,920 --> 00:18:07,340
multiple checks cross-site scripting and so on then that time grows exponentially and that

183
00:18:07,340 --> 00:18:08,100
exponential growth

184
00:18:08,120 --> 00:18:12,100
means that of course you're going to be twiddling your thumbs expecting for the scan to complete

185
00:18:12,100 --> 00:18:17,900
but now it's an advanced scan it's not a baseline scan and that means that the time that you need

186
00:18:17,900 --> 00:18:24,600
to cater for that needs to be sufficient, right? So word of warning there going from changing

187
00:18:24,600 --> 00:18:29,200
baseline scan to something much more advanced also implies that you're going to have an

188
00:18:29,200 --> 00:18:34,580
exponential growth in the time of scanning let alone the spidering that will come before it, right?

189
00:18:34,580 --> 00:18:37,740
Exactly and you'll see here we've got a lot more passes

190
00:18:38,120 --> 00:18:45,260
so we've got a you know we've actually 131 which is so we're running a lot more rules here

191
00:18:45,260 --> 00:18:52,000
and we're running the active scan rules as well as the passive ones. So it's doing a lot more

192
00:18:52,000 --> 00:18:57,940
and if you're running against a real application this will take significantly longer but this is

193
00:18:57,940 --> 00:19:02,500
where you will actually find the interesting things like cross-site scripting and SQL injection.

194
00:19:02,500 --> 00:19:07,640
I said this is where we're actually attacking so you do need to have permission to attack

195
00:19:08,120 --> 00:19:17,600
the application you're targeting. So i'm not gonna so the docker i'm sorry the GitHub actions

196
00:19:17,600 --> 00:19:23,260
are essentially the same as the docker package scans they are using the docker package scans

197
00:19:23,260 --> 00:19:29,860
but you also have the option to raise issues on the relevant repos as well so they'll add a little

198
00:19:29,860 --> 00:19:38,040
bit more functionality there. So what i want to do now is actually create an automation framework

199
00:19:38,120 --> 00:19:44,520
plan so there are various ways of doing that but the easiest one is actually by running ZAP

200
00:19:45,160 --> 00:19:50,600
and so let's just so i'm gonna start up ZAP.

201
00:19:54,520 --> 00:20:02,440
And while that loads up what exactly is a plan Simon? So an automation plan is a set of jobs.

202
00:20:03,080 --> 00:20:07,800
So that has a lot of functionality and we've kind of distilled those into a set of jobs

203
00:20:08,120 --> 00:20:15,560
that we think will be most useful in automation and what you need to do is go to the automation tab

204
00:20:16,120 --> 00:20:22,600
which is hidden by default and what you can do is then if that..

205
00:20:25,400 --> 00:20:29,320
We have various buttons down here and we have an option to create a new plan.

206
00:20:30,440 --> 00:20:36,200
Now you have to specify context so this works quite well if you've actually done some manual

207
00:20:36,200 --> 00:20:37,640
testing first which i haven't done

208
00:20:38,200 --> 00:20:43,320
and you'll see what effect that has and we've got profiles here and you can see

209
00:20:43,320 --> 00:20:47,160
this is the list of jobs so this is all of the jobs available to me

210
00:20:48,200 --> 00:20:55,000
based on what i've got installed and if you actually go to the documentation you will see

211
00:20:56,280 --> 00:21:01,160
a list of all the jobs that are available. So i'm there may be well be some jobs that aren't

212
00:21:01,160 --> 00:21:05,560
available to me because i don't have those relevant add-ons installed but online you will

213
00:21:05,560 --> 00:21:07,720
have the full list.

214
00:21:07,720 --> 00:21:07,960


215
00:21:07,960 --> 00:21:11,260
Now, you can choose a custom profile, in which case you can choose whichever jobs you want,

216
00:21:11,760 --> 00:21:18,600
but I want to do a full scan, so I will save that, and you'll see we now have this list of jobs down

217
00:21:18,600 --> 00:21:25,740
here, and they've got a status. Now, just for kicks, I will run that, and you'll see immediately

218
00:21:25,740 --> 00:21:30,920
I get an error, and you've switched to the output tab. You'll see no URLs defined in any of the

219
00:21:30,920 --> 00:21:38,520
contexts. I haven't told the plan what to do. Right, what to do, yeah. Yeah, so what I can do is

220
00:21:38,520 --> 00:21:46,380
we can double click on any of these things, and we can then actually modify stuff. So what I want is

221
00:21:46,380 --> 00:21:53,720
I want my URL, and you can put any number of URLs in here, and it will include everything else,

222
00:21:53,720 --> 00:22:00,800
and you can actually include, exclude, and technology configurations. You can't actually

223
00:22:00,800 --> 00:22:06,320
configure the authentication for the context here, even though this is actually something

224
00:22:06,320 --> 00:22:10,020
that the automation framework supports, if the GUI hasn't been updated yet.

225
00:22:11,500 --> 00:22:20,320
Another thing I will do is I will change the report, because I think I'll go for traditional

226
00:22:20,320 --> 00:22:26,900
PDF, and I will display the report when it runs.

227
00:22:28,700 --> 00:22:30,320
Oh, the other thing is I will

228
00:22:30,320 --> 00:22:37,720
take the AJAX spider out, because this one, we know it won't actually help at all,

229
00:22:37,780 --> 00:22:41,000
and it'll just speed things up. So we can actually, even though once we've created a plan,

230
00:22:41,080 --> 00:22:45,680
we can add more jobs, we can remove them, we can move them up and down. So you can actually choose,

231
00:22:45,900 --> 00:22:49,720
say you want both the spider and the AJAX spider, you can choose which order they run in,

232
00:22:49,720 --> 00:22:58,180
which you can't do from the package scans. So that is creating my plan, and if I run that,

233
00:22:58,280 --> 00:23:00,120
we can then see the progress

234
00:23:00,320 --> 00:23:04,220
down here, we can see that the spider has run, the passive scan has run,

235
00:23:04,920 --> 00:23:07,460
and there we go. There's the report.

236
00:23:07,920 --> 00:23:08,560
Your report.

237
00:23:09,060 --> 00:23:18,880
That ran very quickly, and it will not have actually spidered the whole of my Tomcat documents,

238
00:23:19,980 --> 00:23:27,840
because you've got a lot more flexibility. So you can actually say where it's going to include.

239
00:23:28,220 --> 00:23:30,300
So you can actually choose URLs as well.

240
00:23:30,540 --> 00:23:33,760
So each of these jobs has its own set of options.

241
00:23:34,180 --> 00:23:38,200
So you can choose whether it's a context, an authenticated user of available.

242
00:23:38,580 --> 00:23:44,160
You could actually choose to crawl just a particular part of your site rather than the whole site.

243
00:23:44,740 --> 00:23:46,040
So there's lots of options here.

244
00:23:47,600 --> 00:23:50,360
So that is how we run it in the desktop.

245
00:23:51,320 --> 00:23:54,380
And that's all well and good, but we want to do these things from the command line.

246
00:23:54,860 --> 00:23:59,040
So what I'll do is I will save and...

247
00:24:00,320 --> 00:24:03,920
Now we're going to have a lovely YAML file ready to go.

248
00:24:04,480 --> 00:24:04,800
Yep.

249
00:24:05,480 --> 00:24:10,680
So I'll call it demo.yaml, and I will close that down.

250
00:24:11,880 --> 00:24:16,140
While you close that down, I think it's important to, again, as a general good practice, right,

251
00:24:16,280 --> 00:24:19,980
to try things out and set them up in the GUI as much as possible.

252
00:24:20,680 --> 00:24:21,880
Test them out if you like.

253
00:24:22,380 --> 00:24:26,900
Always test them out also in a smaller scale, especially if you've got some grandiose website,

254
00:24:26,900 --> 00:24:30,220
and then move into the command line where you have...

255
00:24:30,320 --> 00:24:36,200
have that ability to just prioritize automation and industrialize your actions, if you like.

256
00:24:36,840 --> 00:24:37,280
Exactly.

257
00:24:37,680 --> 00:24:38,920
Yeah, I think that's very important.

258
00:24:39,440 --> 00:24:42,860
And you can then see what's going on much more easily.

259
00:24:43,400 --> 00:24:47,060
We have so many people come into the ZAP User Group saying something's gone wrong in automation

260
00:24:47,060 --> 00:24:48,580
and trying to diagnose it.

261
00:24:49,020 --> 00:24:51,760
I always say, can you use the ZAP desktop first?

262
00:24:51,860 --> 00:24:54,000
Because it's so much easier to see what's going on.

263
00:24:55,540 --> 00:24:56,060
Absolutely.

264
00:24:56,720 --> 00:24:59,000
So here we have our YAML file.

265
00:24:59,900 --> 00:25:00,060
So what...

266
00:25:00,320 --> 00:25:05,320
What we can do now is we can...

267
00:25:05,320 --> 00:25:12,300
I'll end up just going far too far back just to actually...

268
00:25:12,300 --> 00:25:17,120
So I want to do autorun.

269
00:25:18,100 --> 00:25:24,400
And I'll get in the full directory just to make sure it picks up the right one.

270
00:25:24,400 --> 00:25:24,640


271
00:25:24,640 --> 00:25:26,400


272
00:25:30,320 --> 00:25:31,300
..hopefully that's right...

273
00:25:32,400 --> 00:25:36,620
And so, yeah, we've got minus command, minus autorun.

274
00:25:36,800 --> 00:25:40,060
And we're just passing in the YAML file.

275
00:25:41,060 --> 00:25:43,480
So we will then...

276
00:25:43,480 --> 00:25:44,260
And you can hear...

277
00:25:44,260 --> 00:25:46,280
This is all the output you saw in the output tab.

278
00:25:46,280 --> 00:25:49,160
You can see the different jobs running.

279
00:25:49,720 --> 00:25:50,860
And there's the report generated.

280
00:25:51,620 --> 00:25:57,180
So that ran exactly the same as it ran within the GUI.

281
00:25:58,200 --> 00:25:58,460
Mm-hmm.

282
00:25:58,980 --> 00:26:00,200
Now, one thing...

283
00:26:00,200 --> 00:26:04,500
I'll actually note here is we have...

284
00:26:04,500 --> 00:26:05,620
There are some tests here.

285
00:26:06,160 --> 00:26:12,520
So you can see that we actually...

286
00:26:12,520 --> 00:26:13,640
One of these tests failed.

287
00:26:14,100 --> 00:26:17,660
Now, by default, the test gets added at info level, which is why the whole thing didn't fail.

288
00:26:18,140 --> 00:26:23,180
But the automation framework has a lot more flexibility on which jobs to run,

289
00:26:23,180 --> 00:26:27,340
what parameters to pass in, and what to check for.

290
00:26:27,640 --> 00:26:30,180
So you can actually check for a whole load of extra things.

291
00:26:30,200 --> 00:26:34,960
To make sure that the scan is doing what you think it's doing.

292
00:26:35,480 --> 00:26:41,080
And this is something I will cover at a later date in a different ZAP video, I think.

293
00:26:42,700 --> 00:26:45,320
So that is the automation framework.

294
00:26:45,660 --> 00:26:50,040
And last but not least is the ZAP API in Daemon mode.

295
00:26:50,700 --> 00:26:50,980
Okay.

296
00:26:51,120 --> 00:26:55,940
So what I'm going to do now is I want to start ZAP in Daemon mode.

297
00:26:56,700 --> 00:26:59,940
So I'm going to start a new...

298
00:27:00,200 --> 00:27:03,900
Tab and paste in the magic command.

299
00:27:05,860 --> 00:27:08,120
So this one...

300
00:27:08,120 --> 00:27:09,980
Again, I'm starting with the directory.

301
00:27:11,360 --> 00:27:12,960
And I'm putting it in Daemon mode.

302
00:27:13,180 --> 00:27:15,100
But I'm also disabling the API key.

303
00:27:15,780 --> 00:27:19,560
And this is important because when ZAP starts,

304
00:27:19,560 --> 00:27:23,720
it will generate a random API key.

305
00:27:24,380 --> 00:27:28,060
And you can't tell what it is if you start ZAP from the command line.

306
00:27:28,280 --> 00:27:30,180
You can actually specify an API key.

307
00:27:30,200 --> 00:27:34,000
So if you need to use one, that's what you do.

308
00:27:34,220 --> 00:27:36,060
But in this environment, it's a safe environment.

309
00:27:36,700 --> 00:27:38,120
So I'm just going to disable it.

310
00:27:39,800 --> 00:27:44,100
But if you're actually testing websites that are potentially malicious,

311
00:27:44,320 --> 00:27:46,300
you should definitely not disable the API key.

312
00:27:46,500 --> 00:27:51,160
Because there are ways in which we know that websites will try and attack tools like ZAP.

313
00:27:53,800 --> 00:27:57,180
So ZAP is now listening on Localist 9090.

314
00:27:57,180 --> 00:27:59,180
Now, one thing I'll do is I will...

315
00:28:00,200 --> 00:28:07,920
I'll actually point my browser at 9090.

316
00:28:09,020 --> 00:28:10,120
How nice is this?

317
00:28:10,180 --> 00:28:13,620
You've got a pack file you can download, some local links.

318
00:28:13,780 --> 00:28:15,440
You can install a CA, right?

319
00:28:15,880 --> 00:28:16,760
All these things.

320
00:28:16,980 --> 00:28:18,560
And one thing I've got is a link to the local API.

321
00:28:18,560 --> 00:28:22,560
And so this is...

322
00:28:22,560 --> 00:28:24,520
You will see we have components.

323
00:28:24,780 --> 00:28:29,560
So these kind of often match tabs or add-ons.

324
00:28:30,200 --> 00:28:35,420
And each of these will actually have a whole load of what we call views,

325
00:28:35,860 --> 00:28:39,200
which is where you can see things, actions, where you can change things.

326
00:28:39,540 --> 00:28:41,600
And there are sometimes other things as well.

327
00:28:41,600 --> 00:28:46,080
So we'll have a look at core, a load of views, a load of actions.

328
00:28:46,960 --> 00:28:49,980
And at the end, a load of other things.

329
00:28:50,120 --> 00:28:52,900
And other things don't return structured data.

330
00:28:53,140 --> 00:28:54,160
They return something else.

331
00:28:55,900 --> 00:28:57,380
And they actually have shortcuts as well.

332
00:28:57,760 --> 00:29:00,040
So the API is very,

333
00:29:00,040 --> 00:29:00,180


334
00:29:00,180 --> 00:29:00,580
very thorough.

335
00:29:01,300 --> 00:29:06,140
So the API essentially allows you to control ZAP as if you were at the desktop.

336
00:29:07,040 --> 00:29:10,320
And if you remember how many options there were in different tabs,

337
00:29:11,420 --> 00:29:13,180
there's a huge amount of things to do.

338
00:29:13,640 --> 00:29:18,820
And the API is one of the things we added quite early on in ZAP development.

339
00:29:19,260 --> 00:29:22,900
And we found that it was actually too complicated for most people.

340
00:29:23,340 --> 00:29:28,860
So that's one reason why I introduced the package scans and then the automation framework.

341
00:29:29,540 --> 00:29:35,300
So the API is incredibly powerful, but it's also not great for people who are new to ZAP.

342
00:29:35,620 --> 00:29:39,060
And it's not great for a lot of people who want to do standard automation things.

343
00:29:40,980 --> 00:29:42,560
So how do you use the API?

344
00:29:42,740 --> 00:29:47,480
Well, you can actually control the API from this GUI if you want, which is useful for testing.

345
00:29:48,080 --> 00:29:51,040
But it's not so good if you actually really want to automate ZAP.

346
00:29:51,680 --> 00:29:58,340
So we have various API clients, including one written in Python.

347
00:29:58,860 --> 00:30:01,120
And this is kind of the main one.

348
00:30:01,240 --> 00:30:04,140
There's a Python, Java, there's JavaScript, there's a whole range of them.

349
00:30:04,400 --> 00:30:07,620
But the Python one, the one I tend to use most of all.

350
00:30:08,120 --> 00:30:09,940
And you'll see we actually have some examples.

351
00:30:10,560 --> 00:30:14,060
And we have a basic spider scan example.

352
00:30:14,740 --> 00:30:17,720
And this is actually what I've copied.

353
00:30:18,520 --> 00:30:21,620
So let's just...

354
00:30:21,620 --> 00:30:27,920
So you do actually have to install the ZAP Python library.

355
00:30:27,920 --> 00:30:30,920
And then you'll see we've got...

356
00:30:31,980 --> 00:30:36,700
We have the URL, the target URL.

357
00:30:37,360 --> 00:30:40,960
We have the how to actually start ZAP.

358
00:30:41,440 --> 00:30:44,420
But that only works if it's listening on 8080.

359
00:30:44,680 --> 00:30:47,400
So if you're listening on a different port, you've got a different way of doing it.

360
00:30:47,720 --> 00:30:49,220
Then we access the target.

361
00:30:49,520 --> 00:30:52,340
We spider the target and we active scan.

362
00:30:52,900 --> 00:30:54,180
And you'll see we actually have to...

363
00:30:54,180 --> 00:30:56,000
We kick off the spider.

364
00:30:56,420 --> 00:30:57,640
And then we have to loop.

365
00:30:57,720 --> 00:30:57,900


366
00:30:57,900 --> 00:30:58,920
waiting until it finishes.

367
00:30:59,780 --> 00:31:04,940
So things like the spider and the active scan are asynchronous operations as far as the API is concerned.

368
00:31:05,400 --> 00:31:08,360
Something like an active scan could take hours potentially.

369
00:31:09,060 --> 00:31:10,740
So that's why you kick it off.

370
00:31:10,800 --> 00:31:12,980
And then you need to poll to see how far it goes.

371
00:31:13,960 --> 00:31:18,540
So with the API, you can actually kick off multiple spiders, multiple active scans.

372
00:31:19,380 --> 00:31:20,840
At the same time, concurrently.

373
00:31:21,080 --> 00:31:23,560
We don't support that in the automation framework.

374
00:31:24,600 --> 00:31:27,300
And in most cases, I think most people don't need it.

375
00:31:27,900 --> 00:31:31,420
So if you're actually doing large-scale scanning,

376
00:31:31,520 --> 00:31:34,600
I'd recommend kicking off a new ZAP instance for each scan you want to do.

377
00:31:35,360 --> 00:31:38,820
But if you want to do that, then this is an option for you.

378
00:31:38,820 --> 00:31:40,860
And the API is really the only way to go.

379
00:31:41,840 --> 00:31:49,980
And you should really know what your spidering time is if you're doing any sort of CI/CD ahead of time.

380
00:31:50,160 --> 00:31:57,140
Or have at least some sort of SLA defined in terms of why is the spidering taking so long.

381
00:31:57,300 --> 00:31:57,820
That's an indicator.

382
00:31:57,900 --> 00:32:05,400
That something else is going on that is probably not part of ZAPit and the configuration.

383
00:32:05,920 --> 00:32:09,160
But it's something involving the website, the application, the deployment, et cetera.

384
00:32:09,480 --> 00:32:16,380
So it's good to have some sort of indication of what spidering times you're looking at ahead of doing any sort of automation.

385
00:32:17,480 --> 00:32:18,000
Definitely.

386
00:32:18,280 --> 00:32:18,440
Yeah.

387
00:32:18,520 --> 00:32:23,120
If you don't know what you're expecting, then you don't know whether it's working the way you expect it.

388
00:32:24,640 --> 00:32:26,100
We'll never catch on, Simon.

389
00:32:26,820 --> 00:32:27,340
Yeah.

390
00:32:27,340 --> 00:32:27,620
No.

391
00:32:27,900 --> 00:32:28,040
We won't.

392
00:32:28,640 --> 00:32:31,740
So this is I've just copied that file.

393
00:32:32,000 --> 00:32:33,460
And you can see I've got a different target.

394
00:32:33,900 --> 00:32:40,500
And I've actually set I'm using this option to initialize the client because I'm listing on 9090.

395
00:32:42,040 --> 00:32:47,420
So I've actually remember I've got ZAP in daemon mode running on another tab.

396
00:32:47,720 --> 00:32:54,380
And then all I need to do is run this with Python 3.

397
00:32:57,900 --> 00:33:07,460
And again, so we can see we're accessing it, we're spidering it with active scanning and actually gives you some progress here as well.

398
00:33:08,660 --> 00:33:27,880
And I just say, how nice is this, right, that you're able to, you know, for those out there that don't, I've written a ton of Java for open source projects, but for those that, you know, don't like Java, right, you can just do it in Python through the daemon mode, have it listen, and then you just get your results back using the

399
00:33:27,880 --> 00:33:29,800
language that, you know, is your preference.

400
00:33:30,820 --> 00:33:31,380
Exactly.

401
00:33:31,420 --> 00:33:36,340
And in this case, you'll see, we're just dumping the results out in JSON format on the command line.

402
00:33:36,620 --> 00:33:39,100
Obviously, you've got complete choice here.

403
00:33:39,460 --> 00:33:42,120
So this really allows you to do whatever you want to do.

404
00:33:42,580 --> 00:33:47,820
It gives, yeah, the API is the most amount of flexibility possible.

405
00:33:48,120 --> 00:33:57,840
And I think that's the kind of one of the lessons, one of the things that should come out of this is we have a lot of options is

406
00:33:57,840 --> 00:33:57,860


407
00:33:57,880 --> 00:33:58,020


408
00:33:58,020 --> 00:33:58,060


409
00:33:58,060 --> 00:34:02,540
because it's a balance between usability and functionality and flexibility.

410
00:34:03,480 --> 00:34:04,900
And what I'm planning on...

411
00:34:04,900 --> 00:34:15,100
I was just going to say, speaking about options, do you want to quickly hear a story from the trenches on the harshest CI/CD ZAPit rule that I've ever heard of?

412
00:34:15,400 --> 00:34:15,740
Absolutely.

413
00:34:16,900 --> 00:34:17,300
All right.

414
00:34:17,340 --> 00:34:21,320
So we're trying to figure out what's holding back the build.

415
00:34:21,400 --> 00:34:24,080
And we're seeing that it's a security rule that has been triggered.

416
00:34:24,080 --> 00:34:27,480
But it's not one that's been set by any of the security teams, right?

417
00:34:27,480 --> 00:34:32,680
So we're wondering, on the one side, what is this rule?

418
00:34:32,800 --> 00:34:42,800
And on the second side, we're really proud of the fact that we're not writing security rules only within the security team, but also developers and other members of staff have taken that on board.

419
00:34:43,500 --> 00:34:57,200
And it turns out that the entire pipeline has failed because somebody has written the harshest rule in terms of a user agent check for a specific browser version or set of browsers, actually.

420
00:34:57,480 --> 00:35:15,020
And didn't allow or cater for any future versions of, I think it was Safari in that case, where the iOS version number gets passed as part of the update of the actual iOS, you know, when Apple releases an update.

421
00:35:16,240 --> 00:35:20,940
And we had to have a quiet conversation saying, you know, it's great that you're writing your own rules.

422
00:35:21,360 --> 00:35:27,400
But when it comes to rules that fail the whole pipeline, probably a user agent rule slightly

423
00:35:27,480 --> 00:35:34,460
harsh, given that there are no active exploits in history for modern browsers, just based on the version check.

424
00:35:35,900 --> 00:35:37,840
Yes, very nice.

425
00:35:39,880 --> 00:35:48,620
So one thing we're planning on doing is actually writing some more documentation, because we do have this kind of different ways of automating ZAP.

426
00:35:49,140 --> 00:35:52,620
But we don't give you a great deal more help.

427
00:35:53,100 --> 00:35:55,100
So we're going to try and write some more docs.

428
00:35:55,680 --> 00:35:56,980
And it kind of ties in.

429
00:35:56,980 --> 00:36:02,240
We have this getting started guide, and we want to improve this.

430
00:36:02,560 --> 00:36:06,440
So, well, actually, we don't want to change this at all, but we want to have some getting further guides.

431
00:36:06,980 --> 00:36:13,000
And the first getting further guide will be on automation and will hopefully be, we'll start publishing things soon.

432
00:36:13,400 --> 00:36:17,840
If you're watching this several weeks or months after we recorded it, it will hopefully be there.

433
00:36:18,300 --> 00:36:23,920
So just go to the documentation and there may well be then a getting further link underneath here.

434
00:36:25,500 --> 00:36:26,920
But that is...

435
00:36:27,520 --> 00:36:29,600
I think everything I wanted to cover.

436
00:36:30,700 --> 00:36:34,120
I don't know if there's anything else you want to add, Yiannis, about ZAP Automation?

437
00:36:34,940 --> 00:36:35,440
Great.

438
00:36:35,440 --> 00:36:38,980
So, yeah, that was all about introduction to ZAP Automation.

439
00:36:39,220 --> 00:36:44,260
We will be covering the automation framework in another one of these episodes.

440
00:36:44,620 --> 00:36:52,000
But if you have any feedback or you'd like any other, taught us to cover any other topics, then please let us know in the comments below.

441
00:36:52,480 --> 00:36:53,220
Thank you very much.


